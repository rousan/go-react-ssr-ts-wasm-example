options:
tasks:
  setup:
    run:
      - command: go install github.com/cosmtrek/air@latest
      - command: sudo npm install -g concurrently
  build:client:
    run:
      - command: cd client && yarn build && cd ..
  build:server:
    run:
      - command: cd server && go build -o ./build/app . && cd ..
  build:wasm:
    run: |
      cd wasm
      GOARCH=wasm GOOS=js go build -o ./build/lib.wasm .
      hash=$(shasum --binary ./build/lib.wasm | awk '{ print $1 }')
      rm -rf ../client/public/wasm
      mkdir ../client/public/wasm
      cp ./build/lib.wasm "../client/public/wasm/lib.${hash}.wasm"
      echo "// WARNING: Do not edit this file, as it is auto-generated.\nexport default 'wasm/lib.${hash}.wasm';" > ../client/wasm/wasm-path.ts
      cd ..
  dev:client:
    run:
      - command: cd client && yarn dev && cd ..
  dev:server:
    run:
      - command: cd server && air && cd ..
  dev:wasm:
    run: |
      cd wasm
      air --build.cmd "tusk build:wasm" --build.bin "echo 'WebAssembly file is generated!'"
      cd ..
  dev:
    run:
      - command: concurrently "tusk dev:client" "tusk dev:server" "tusk dev:wasm"
  start:client:
    run:
      - command: tusk build:wasm
      - command: tusk build:client
      - command: cd client && yarn start && cd..
  start:server:
    run:
      - command: tusk build:server
      - command: cd server && ./build/app && cd ..
  start:
    run:
      - command: concurrently "tusk start:client" "tusk start:server"
  tidy:server:
    run:
      - command: cd server && go mod tidy && cd ..
  tidy:wasm:
    run:
      - command: cd wasm && go mod tidy && cd ..
  tidy:
    run:
      - command: tusk tidy:server && tusk tidy:wasm
  up:
    run:
      - command: tusk build:wasm
      - command: docker-compose kill
      - command: docker-compose up --no-deps --build
  up:detached:
    run:
      - command: tusk build:wasm
      - command: docker-compose kill
      - command: docker-compose up -d --no-deps --build
  deploy:staging:
    run:
      - command: echo "Deploying on the prod server"
      - command: echo "Please update (if any) the .env files for the staging server by logging into the VPS, hit Enter once it's done:" && read confirmation
      - command: ssh root@neon.lab.rousan.io 'bash -s' <./deploy/run-inside-vps.sh staging
  deploy:prod:
    run:
      - command: echo "Deploying on the prod server"
      - command: echo "Please update (if any) the .env files for the prod server by logging into the VPS, hit Enter once it's done:" && read confirmation
      - command: ssh root@neon.lab.rousan.io 'bash -s' <./deploy/run-inside-vps.sh prod
