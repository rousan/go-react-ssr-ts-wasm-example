tasks:
  setup:dev:
    run: |
      set -e
      go install github.com/cosmtrek/air@latest
      tusk setup:prod
  setup:prod:
    run: |
      set -e
      npm install -g concurrently
      npm install -g hash-files
      cd client && yarn && cd ..
      cd server && go mod download && cd ..
      cd wasm && go mod download && cd ..
  build:client:
    run: |
      set -e
      cd client
      yarn build
  build:server:
    run: |
      set -e
      cd server
      go build -o ./build/app .
  build:wasm:
    run: |
      set -e
      cd wasm
      GOARCH=wasm GOOS=js go build -o ./build/lib.wasm .
      hash=$(hash-files -f '["./build/lib.wasm"]')
      rm -rf ../client/public/wasm
      mkdir ../client/public/wasm
      cp ./build/lib.wasm "../client/public/wasm/lib.${hash}.wasm"
      echo "// WARNING: Do not edit this file, as it is auto-generated.\nexport default 'wasm/lib.${hash}.wasm';" > ../client/wasm/wasm-path.ts
  build:
    run: |
      set -e
      tusk build:wasm
      tusk build:client
      tusk build:server
  dev:client:
    run: |
      set -e
      cd client
      yarn dev
  dev:server:
    run: |
      set -e
      cd server
      air
  dev:wasm:
    run: |
      set -e
      cd wasm
      air --build.cmd "tusk build:wasm" --build.bin "echo 'WebAssembly file is generated!'"
  dev:
    run: |
      set -e
      concurrently --kill-others-on-fail "tusk dev:wasm" "tusk dev:client" "tusk dev:server"
  start:client:
    run: |
      set -e
      cd client
      yarn start
  start:server:
    run: |
      set -e
      cd server
      ./build/app
  start:
    run: |
      set -e
      concurrently --kill-others-on-fail "tusk start:client" "tusk start:server"
  tidy:server:
    run: |
      set -e
      cd server
      go mod tidy
  tidy:wasm:
    run: |
      set -e
      cd wasm
      go mod tidy
  tidy:
    run: |
      set -e
      tusk tidy:server
      tusk tidy:wasm
  up:
    run: |
      set -e
      docker-compose kill
      docker-compose up --no-deps --build
  up:detached:
    run: |
      set -e
      docker-compose kill
      docker-compose up -d --no-deps --build
  clean:docker:
    run: docker rm -vf $(docker ps -aq) && docker rmi -f $(docker images -aq)
  deploy:staging:
    run: |
      set -e
      echo "Deploying on the prod server"
      echo "Please update (if any) the .env file for the staging server by logging into the VPS, hit Enter once it's done:" && read confirmation
      ssh root@neon.lab.rousan.io 'bash -s' <./deploy/run-inside-vps.sh staging
  deploy:prod:
    run: |
      set -e
      echo "Deploying on the prod server"
      echo "Please update (if any) the .env file for the prod server by logging into the VPS, hit Enter once it's done:" && read confirmation
      ssh root@neon.lab.rousan.io 'bash -s' <./deploy/run-inside-vps.sh prod
